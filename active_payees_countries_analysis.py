#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö payees –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ beneficiaryCountryCode –∏ paymentCountryCode
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
from datetime import datetime
from collections import defaultdict
import json

def get_all_active_payees(api):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö payees —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    active_payees = []
    limit = 100
    offset = 0
    page = 1
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö payees...")
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            params = {
                'limit': limit,
                'offset': offset,
                'status': 'ACTIVE'  # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º
            }
            
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = api._make_request('GET', '/payees', params=params)
            
            # –ü–æ–ª—É—á–∏—Ç—å payees —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            print(f"–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} –∞–∫—Ç–∏–≤–Ω—ã—Ö payees (–≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_count})")
            
            if not payees:
                break
            
            # –î–æ–±–∞–≤–∏—Ç—å –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            for payee in payees:
                if payee.get('status') == 'ACTIVE':
                    active_payees.append(payee)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (len(active_payees) / total_count) * 100 if total_count > 0 else 0
            print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(active_payees)}/{total_count} ({progress:.1f}%)")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, —Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(payees) < limit:
                break
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if len(active_payees) >= total_count:
                break
            
            offset += limit
            page += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            offset += limit
            page += 1
            continue
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ {len(active_payees)} –∞–∫—Ç–∏–≤–Ω—ã—Ö payees")
    return active_payees

def analyze_active_payees_countries(active_payees):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö payees –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó {len(active_payees)} –ê–ö–¢–ò–í–ù–´–• PAYEES –ü–û –°–¢–†–ê–ù–ê–ú")
    print("=" * 70)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    beneficiary_countries = defaultdict(int)
    payment_countries = defaultdict(int)
    country_combinations = defaultdict(int)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ payees
    payees_by_beneficiary_country = defaultdict(list)
    payees_by_payment_country = defaultdict(list)
    payees_details = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ payee
    for i, payee in enumerate(active_payees):
        if (i + 1) % 100 == 0:
            print(f"  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(active_payees)} –∞–∫—Ç–∏–≤–Ω—ã—Ö payees...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        payee_id = payee.get('id', 'UNKNOWN')
        status = payee.get('status', 'UNKNOWN')
        name = payee.get('name', 'No name')
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        contact = payee.get('contactInformation', {})
        beneficiary_country = contact.get('beneficiaryCountryCode', 'UNKNOWN')
        payment_country = contact.get('paymentCountryCode', 'UNKNOWN')
        email = contact.get('email', 'No email')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        address = contact.get('address', {})
        city = address.get('city', 'No city') if isinstance(address, dict) else 'No city'
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        beneficiary_countries[beneficiary_country] += 1
        payment_countries[payment_country] += 1
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω
        combo = f"{beneficiary_country} -> {payment_country}"
        country_combinations[combo] += 1
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        payee_info = {
            'id': payee_id,
            'name': name,
            'status': status,
            'beneficiary_country': beneficiary_country,
            'payment_country': payment_country,
            'email': email,
            'city': city
        }
        
        payees_details.append(payee_info)
        payees_by_beneficiary_country[beneficiary_country].append(payee_info)
        payees_by_payment_country[payment_country].append(payee_info)
    
    return {
        'beneficiary_countries': beneficiary_countries,
        'payment_countries': payment_countries,
        'country_combinations': country_combinations,
        'payees_by_beneficiary_country': payees_by_beneficiary_country,
        'payees_by_payment_country': payees_by_payment_country,
        'payees_details': payees_details
    }

def print_countries_report(analysis, total_active):
    """–í—ã–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    
    beneficiary_countries = analysis['beneficiary_countries']
    payment_countries = analysis['payment_countries']
    country_combinations = analysis['country_combinations']
    payees_by_beneficiary_country = analysis['payees_by_beneficiary_country']
    payees_by_payment_country = analysis['payees_by_payment_country']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ beneficiaryCountryCode
    print("\nüè† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û BENEFICIARY COUNTRY CODE:")
    print("-" * 60)
    sorted_beneficiary = sorted(beneficiary_countries.items(), key=lambda x: x[1], reverse=True)
    for country, count in sorted_beneficiary:
        percentage = (count / total_active) * 100 if total_active else 0
        print(f"  {country}: {count:,} ({percentage:.1f}%)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ paymentCountryCode
    print(f"\nüí≥ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û PAYMENT COUNTRY CODE:")
    print("-" * 60)
    sorted_payment = sorted(payment_countries.items(), key=lambda x: x[1], reverse=True)
    for country, count in sorted_payment:
        percentage = (count / total_active) * 100 if total_active else 0
        print(f"  {country}: {count:,} ({percentage:.1f}%)")
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω
    print(f"\nüîÑ –¢–û–ü-20 –ö–û–ú–ë–ò–ù–ê–¶–ò–ô –°–¢–†–ê–ù (Beneficiary -> Payment):")
    print("-" * 60)
    sorted_combos = sorted(country_combinations.items(), key=lambda x: x[1], reverse=True)
    for combo, count in sorted_combos[:20]:
        percentage = (count / total_active) * 100 if total_active else 0
        print(f"  {combo}: {count:,} ({percentage:.1f}%)")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å—Ç—Ä–∞–Ω–∞–º
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ PAYEES –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–¢–†–ê–ù–ê–ú:")
    print("-" * 60)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–æ–ø —Å—Ç—Ä–∞–Ω
    key_countries = ['UA', 'BY', 'EE', 'RU', '--', 'UNKNOWN']
    
    for country in key_countries:
        if country in payees_by_beneficiary_country:
            payees_list = payees_by_beneficiary_country[country]
            print(f"\n  üè† BENEFICIARY: {country} ({len(payees_list)} —à—Ç.):")
            for payee in payees_list[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                print(f"    - {payee['name']} | Email: {payee['email']} | Payment: {payee['payment_country']} | City: {payee['city']}")
        
        if country in payees_by_payment_country and country != 'UNKNOWN':
            payees_list = payees_by_payment_country[country]
            if len(payees_list) > 0:
                print(f"\n  üí≥ PAYMENT: {country} ({len(payees_list)} —à—Ç.):")
                for payee in payees_list[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                    print(f"    - {payee['name']} | Email: {payee['email']} | Beneficiary: {payee['beneficiary_country']} | City: {payee['city']}")

def check_suspicious_countries(analysis):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã (RU, BY)"""
    
    payees_details = analysis['payees_details']
    
    # –ü–æ–∏—Å–∫ RU –∏–ª–∏ BY –≤ –ª—é–±–æ–º –∏–∑ –ø–æ–ª–µ–π
    ru_by_payees = []
    for payee in payees_details:
        if (payee['beneficiary_country'] in ['RU', 'BY'] or 
            payee['payment_country'] in ['RU', 'BY']):
            ru_by_payees.append(payee)
    
    if ru_by_payees:
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ê–ô–î–ï–ù–´ –ê–ö–¢–ò–í–ù–´–ï PAYEES –° RU/BY:")
        print("-" * 60)
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(ru_by_payees)}")
        
        for payee in ru_by_payees:
            print(f"  üö® ID: {payee['id']}")
            print(f"     Name: {payee['name']}")
            print(f"     Email: {payee['email']}")
            print(f"     Beneficiary: {payee['beneficiary_country']}")
            print(f"     Payment: {payee['payment_country']}")
            print(f"     City: {payee['city']}")
            print()
    else:
        print(f"\n‚úÖ –ù–ï –ù–ê–ô–î–ï–ù–û –ê–ö–¢–ò–í–ù–´–• PAYEES –° RU/BY –í –û–ë–û–ò–• –ü–û–õ–Ø–•")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üåç –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• PAYEES –ü–û –°–¢–†–ê–ù–ê–ú - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö payees
        active_payees = get_all_active_payees(api)
        
        if not active_payees:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö payees")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        analysis = analyze_active_payees_countries(active_payees)
        
        # –û—Ç—á–µ—Ç
        print_countries_report(analysis, len(active_payees))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        check_suspicious_countries(analysis)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename = f"active_payees_countries_report_{timestamp}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'environment': 'sandbox' if is_sandbox else 'production',
            'total_active_payees': len(active_payees),
            'beneficiary_countries_stats': dict(analysis['beneficiary_countries']),
            'payment_countries_stats': dict(analysis['payment_countries']),
            'country_combinations_stats': dict(analysis['country_combinations']),
            'detailed_payees': analysis['payees_details']
        }
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\n" + "=" * 80)
        print("üèÜ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ê–ö–¢–ò–í–ù–´–ú PAYEES:")
        print(f"  üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö payees: {len(active_payees):,}")
        print(f"  üè† –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö beneficiary —Å—Ç—Ä–∞–Ω: {len(analysis['beneficiary_countries'])}")
        print(f"  üí≥ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö payment —Å—Ç—Ä–∞–Ω: {len(analysis['payment_countries'])}")
        print(f"  üîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(analysis['country_combinations'])}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 