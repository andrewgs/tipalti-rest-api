#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö payees –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω (BR, MX, US)
–°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ payees –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
"""

import json
import csv
import sys
from datetime import datetime
import glob


def find_latest_backup_file():
    """–ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ —Å cursor"""
    backup_files = glob.glob("payees_backup_cursor_*.json")
    
    if not backup_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–∞ payees_backup_cursor_*.json")
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)
    backup_files.sort(reverse=True)
    latest_file = backup_files[0]
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    return latest_file


def extract_payees_excluding_countries(filename, excluded_countries=['BR', 'MX', 'US']):
    """–ò–∑–≤–ª–µ—á—å payees –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã"""
    
    print("üåç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï PAYEES –ò–°–ö–õ–Æ–ß–ê–Ø –£–ö–ê–ó–ê–ù–ù–´–ï –°–¢–†–ê–ù–´")
    print("=" * 60)
    print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã: {', '.join(excluded_countries)}")
    print()
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        print(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
        
        with open(filename, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ payees
        metadata = backup_data.get('metadata', {})
        all_payees = backup_data.get('payees', [])
        
        print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞:")
        print(f"  ‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {metadata.get('datetime', 'N/A')}")
        print(f"  üë• –í—Å–µ–≥–æ payees –≤ —Ñ–∞–π–ª–µ: {len(all_payees)}")
        print(f"  üåê –°—Ä–µ–¥–∞: {metadata.get('environment', 'N/A')}")
        print()
        
        if not all_payees:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö payees –≤ —Ñ–∞–π–ª–µ")
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º payees
        print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è payees...")
        print(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã: {excluded_countries}")
        
        filtered_payees = []
        excluded_count = {country: 0 for country in excluded_countries}
        excluded_total = 0
        
        for payee in all_payees:
            contact_info = payee.get('contactInformation', {})
            country_code = contact_info.get('beneficiaryCountryCode', '').strip()
            
            if country_code in excluded_countries:
                excluded_count[country_code] += 1
                excluded_total += 1
            else:
                filtered_payees.append(payee)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"  ‚úÖ Payees –≤–∫–ª—é—á–µ–Ω–æ: {len(filtered_payees)}")
        print(f"  üö´ Payees –∏—Å–∫–ª—é—á–µ–Ω–æ: {excluded_total}")
        print(f"  üìã –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:")
        
        for country in excluded_countries:
            count = excluded_count[country]
            percentage = (count / len(all_payees) * 100) if len(all_payees) > 0 else 0
            print(f"    {country}: {count:,} payees ({percentage:.1f}%)")
        
        print()
        
        if not filtered_payees:
            print("‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å payees")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–∞–Ω—ã
        from collections import Counter
        remaining_countries = Counter()
        
        for payee in filtered_payees:
            contact_info = payee.get('contactInformation', {})
            country_code = contact_info.get('beneficiaryCountryCode', '').strip()
            remaining_countries[country_code] += 1
        
        print(f"üåç –û–°–¢–ê–í–®–ò–ï–°–Ø –°–¢–†–ê–ù–´ ({len(remaining_countries)} —Å—Ç—Ä–∞–Ω):")
        
        for country, count in remaining_countries.most_common(10):
            percentage = (count / len(filtered_payees) * 100) if len(filtered_payees) > 0 else 0
            display_country = country if country else '--'
            print(f"  {display_country}: {count:,} payees ({percentage:.1f}%)")
        
        if len(remaining_countries) > 10:
            other_count = sum(remaining_countries.values()) - sum(dict(remaining_countries.most_common(10)).values())
            print(f"  ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ {len(remaining_countries)-10} —Å—Ç—Ä–∞–Ω: {other_count:,} payees")
        
        print()
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        csv_filename = f"payees_excluding_{'_'.join(excluded_countries)}_{timestamp}.csv"
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞: {csv_filename}")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
        csv_headers = [
            'id',
            'refCode', 
            'status',
            'name',
            'firstName',
            'lastName',
            'email',
            'companyName',
            'beneficiaryCountryCode',
            'paymentCountryCode',
            'address_street',
            'address_city',
            'address_state',
            'address_zipCode',
            'phone',
            'createdDate',
            'lastModifiedDate'
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º CSV
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(csv_headers)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ payees
            for payee in filtered_payees:
                contact_info = payee.get('contactInformation', {})
                address = contact_info.get('address', {}) if isinstance(contact_info.get('address'), dict) else {}
                
                row = [
                    payee.get('id', ''),
                    payee.get('refCode', ''),
                    payee.get('status', ''),
                    payee.get('name', ''),
                    contact_info.get('firstName', ''),
                    contact_info.get('lastName', ''),
                    contact_info.get('email', ''),
                    contact_info.get('companyName', ''),
                    contact_info.get('beneficiaryCountryCode', ''),
                    contact_info.get('paymentCountryCode', ''),
                    address.get('street', '') if isinstance(address, dict) else '',
                    address.get('city', '') if isinstance(address, dict) else '',
                    address.get('state', '') if isinstance(address, dict) else '',
                    address.get('zipCode', '') if isinstance(address, dict) else '',
                    contact_info.get('phone', ''),
                    payee.get('createdDate', ''),
                    payee.get('lastModifiedDate', '')
                ]
                
                writer.writerow(row)
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º JSON –æ—Ç—á–µ—Ç –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        report_filename = f"filtering_report_excluding_{'_'.join(excluded_countries)}_{timestamp}.json"
        
        report_data = {
            "metadata": {
                "timestamp": timestamp,
                "datetime": datetime.now().isoformat(),
                "source_file": filename,
                "excluded_countries": excluded_countries,
                "total_payees_original": len(all_payees),
                "total_payees_filtered": len(filtered_payees),
                "total_payees_excluded": excluded_total,
                "countries_remaining": len(remaining_countries)
            },
            "exclusion_details": excluded_count,
            "remaining_countries": dict(remaining_countries),
            "csv_filename": csv_filename
        }
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {report_filename}")
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print()
        print("üéâ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"üìÅ CSV —Ñ–∞–π–ª: {csv_filename}")
        print(f"üìä Payees –≤ CSV: {len(filtered_payees):,}")
        print(f"üåç –°—Ç—Ä–∞–Ω –≤ CSV: {len(remaining_countries)}")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ payees: {excluded_total:,}")
        print(f"üìã –û—Ç—á–µ—Ç: {report_filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        from collections import Counter
        status_count = Counter(payee.get('status', 'Unknown') for payee in filtered_payees)
        
        print()
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
        for status, count in status_count.most_common():
            percentage = (count / len(filtered_payees) * 100) if len(filtered_payees) > 0 else 0
            print(f"  {status}: {count:,} payees ({percentage:.1f}%)")
        
        return True
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üåç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï PAYEES –ò–°–ö–õ–Æ–ß–ê–Ø –°–¢–†–ê–ù–´")
    print("üìä –°–æ–∑–¥–∞–µ–º CSV —Å–æ –≤—Å–µ–º–∏ payees –∫—Ä–æ–º–µ BR, MX, US")
    print()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    backup_file = find_latest_backup_file()
    
    if not backup_file:
        sys.exit(1)
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω
    excluded_countries = ['BR', 'MX', 'US']
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    success = extract_payees_excluding_countries(backup_file, excluded_countries)
    
    if success:
        print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)


if __name__ == "__main__":
    main() 