#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º Payees
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º payees –≤ —Å–∏—Å—Ç–µ–º–µ Tipalti
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
from datetime import datetime
from collections import defaultdict
import json

def get_full_payees_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º payees"""
    
    print(f"üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û PAYEES - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ payees...")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö payees (—Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é)
        all_payees = api.get_payees_list(limit=1000)  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        print(f"üë• –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ payees: {len(all_payees)}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = defaultdict(int)
        country_stats = defaultdict(int)
        country_status_stats = defaultdict(lambda: defaultdict(int))
        ru_payees = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ payee
        for payee in all_payees:
            status = payee.get('status', 'UNKNOWN')
            status_stats[status] += 1
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—É
            contact = payee.get('contactInformation', {})
            country = contact.get('beneficiaryCountryCode', 'UNKNOWN')
            country_stats[country] += 1
            country_status_stats[country][status] += 1
            
            # –°–æ–±—Ä–∞—Ç—å RU payees –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if country == 'RU':
                ru_payees.append({
                    'id': payee.get('id'),
                    'name': payee.get('name', 'No name'),
                    'status': status,
                    'email': contact.get('email', 'No email')
                })
        
        # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
        print("-" * 40)
        for status, count in sorted(status_stats.items()):
            percentage = (count / len(all_payees)) * 100 if all_payees else 0
            print(f"  {status}: {count} ({percentage:.1f}%)")
        
        print(f"\nüìä –ò–¢–û–ì–û: {len(all_payees)} payees")
        
        # –¢–æ–ø —Å—Ç—Ä–∞–Ω
        print(f"\nüåç –¢–û–ü-10 –°–¢–†–ê–ù:")
        print("-" * 40)
        sorted_countries = sorted(country_stats.items(), key=lambda x: x[1], reverse=True)
        for country, count in sorted_countries[:10]:
            percentage = (count / len(all_payees)) * 100 if all_payees else 0
            print(f"  {country}: {count} ({percentage:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ RU
        if ru_payees:
            print(f"\nüá∑üá∫ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–û–°–°–ò–ò:")
            print("-" * 40)
            ru_status_stats = country_status_stats['RU']
            total_ru = len(ru_payees)
            
            for status, count in sorted(ru_status_stats.items()):
                percentage = (count / total_ru) * 100
                print(f"  {status}: {count} ({percentage:.1f}%)")
            
            print(f"\n  üìä –í—Å–µ–≥–æ RU payees: {total_ru}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            print(f"\n  üìã –ü—Ä–∏–º–µ—Ä—ã RU payees:")
            for payee in ru_payees[:5]:
                print(f"    - {payee['name']} ({payee['status']}) - {payee['email']}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename = f"payees_status_report_{timestamp}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'environment': 'sandbox' if is_sandbox else 'production',
            'total_payees': len(all_payees),
            'status_statistics': dict(status_stats),
            'country_statistics': dict(country_stats),
            'country_status_breakdown': {
                country: dict(statuses) 
                for country, statuses in country_status_stats.items()
            },
            'ru_payees_details': ru_payees
        }
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        return {
            'total': len(all_payees),
            'active': status_stats.get('ACTIVE', 0),
            'suspended': status_stats.get('SUSPENDED', 0),
            'ru_total': len(ru_payees),
            'ru_active': ru_status_stats.get('ACTIVE', 0),
            'ru_suspended': ru_status_stats.get('SUSPENDED', 0)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_full_payees_statistics()
        
        if stats:
            print("\n" + "=" * 60)
            print("üèÜ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
            print(f"  üìä –í—Å–µ–≥–æ payees: {stats['total']}")
            print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}")
            print(f"  üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['suspended']}")
            
            if stats['ru_total'] > 0:
                print(f"\nüá∑üá∫ –ü–æ –†–æ—Å—Å–∏–∏:")
                print(f"  üìä –í—Å–µ–≥–æ RU: {stats['ru_total']}")
                print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö RU: {stats['ru_active']}")
                print(f"  üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö RU: {stats['ru_suspended']}")
                
                if stats['ru_total'] > 0:
                    completion = (stats['ru_suspended'] / stats['ru_total']) * 100
                    print(f"  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {completion:.1f}%")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 