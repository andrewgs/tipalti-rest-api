#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤—Å–µ—Ö Payees (3000+)
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º payees –≤ —Å–∏—Å—Ç–µ–º–µ Tipalti —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
from datetime import datetime
from collections import defaultdict
import json
import time

def get_all_payees_with_progress(api):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö payees –∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    all_payees = []
    limit = 100  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset = 0
    page = 1
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö payees...")
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            params = {
                'limit': limit,
                'offset': offset
            }
            
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = api._make_request('GET', '/payees', params=params)
            
            # –ü–æ–ª—É—á–∏—Ç—å payees —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            print(f"–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} payees (–≤—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_count})")
            
            if not payees:
                # –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                print("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                break
            
            # –î–æ–±–∞–≤–∏—Ç—å –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            all_payees.extend(payees)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (len(all_payees) / total_count) * 100 if total_count > 0 else 0
            print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(all_payees)}/{total_count} ({progress:.1f}%)")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, —Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(payees) < limit:
                print("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                break
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if len(all_payees) >= total_count:
                print("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ payees")
                break
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            offset += limit
            page += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            time.sleep(0.1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            offset += limit
            page += 1
            continue
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ {len(all_payees)} payees")
    return all_payees

def analyze_payees_comprehensive(all_payees):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö payees"""
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó {len(all_payees)} PAYEES")
    print("=" * 60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats = defaultdict(int)
    country_stats = defaultdict(int)
    country_status_stats = defaultdict(lambda: defaultdict(int))
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –≥—Ä—É–ø–ø–∞–º
    ru_payees = []
    active_payees = []
    suspended_payees = []
    other_status_payees = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ payee
    for i, payee in enumerate(all_payees):
        if (i + 1) % 500 == 0:
            print(f"  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(all_payees)} payees...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        payee_id = payee.get('id', 'UNKNOWN')
        status = payee.get('status', 'UNKNOWN')
        name = payee.get('name', 'No name')
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        contact = payee.get('contactInformation', {})
        country = contact.get('beneficiaryCountryCode', 'UNKNOWN')
        email = contact.get('email', 'No email')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        status_stats[status] += 1
        country_stats[country] += 1
        country_status_stats[country][status] += 1
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä—É–ø–ø
        payee_info = {
            'id': payee_id,
            'name': name,
            'status': status,
            'country': country,
            'email': email
        }
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ payees
        if country == 'RU':
            ru_payees.append(payee_info)
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if status == 'ACTIVE':
            active_payees.append(payee_info)
        elif status == 'SUSPENDED':
            suspended_payees.append(payee_info)
        else:
            other_status_payees.append(payee_info)
    
    return {
        'status_stats': status_stats,
        'country_stats': country_stats,
        'country_status_stats': country_status_stats,
        'ru_payees': ru_payees,
        'active_payees': active_payees,
        'suspended_payees': suspended_payees,
        'other_status_payees': other_status_payees
    }

def print_comprehensive_report(analysis, total_payees):
    """–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    
    status_stats = analysis['status_stats']
    country_stats = analysis['country_stats']
    country_status_stats = analysis['country_status_stats']
    ru_payees = analysis['ru_payees']
    active_payees = analysis['active_payees']
    suspended_payees = analysis['suspended_payees']
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    print("\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    print("-" * 50)
    for status, count in sorted(status_stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_payees) * 100 if total_payees else 0
        print(f"  {status}: {count:,} ({percentage:.1f}%)")
    
    print(f"\nüìä –ò–¢–û–ì–û: {total_payees:,} payees")
    
    # –¢–æ–ø —Å—Ç—Ä–∞–Ω
    print(f"\nüåç –¢–û–ü-15 –°–¢–†–ê–ù:")
    print("-" * 50)
    sorted_countries = sorted(country_stats.items(), key=lambda x: x[1], reverse=True)
    for country, count in sorted_countries[:15]:
        percentage = (count / total_payees) * 100 if total_payees else 0
        print(f"  {country}: {count:,} ({percentage:.1f}%)")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏
    if ru_payees:
        print(f"\nüá∑üá∫ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–û–°–°–ò–ò:")
        print("-" * 50)
        ru_status_stats = country_status_stats['RU']
        total_ru = len(ru_payees)
        
        for status, count in sorted(ru_status_stats.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_ru) * 100
            print(f"  {status}: {count:,} ({percentage:.1f}%)")
        
        print(f"\n  üìä –í—Å–µ–≥–æ RU payees: {total_ru:,}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        ru_by_status = defaultdict(list)
        for payee in ru_payees:
            ru_by_status[payee['status']].append(payee)
        
        print(f"\n  üìã –ü—Ä–∏–º–µ—Ä—ã RU payees –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, payees_list in ru_by_status.items():
            print(f"    {status} ({len(payees_list)} —à—Ç.):")
            for payee in payees_list[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                print(f"      - {payee['name']} - {payee['email']}")
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º
    if active_payees:
        print(f"\n‚úÖ –ê–ö–¢–ò–í–ù–´–ï PAYEES ({len(active_payees):,}):")
        print("-" * 50)
        active_by_country = defaultdict(int)
        for payee in active_payees:
            active_by_country[payee['country']] += 1
        
        for country, count in sorted(active_by_country.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {country}: {count:,}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú PAYEES - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö payees
        all_payees = get_all_payees_with_progress(api)
        
        if not all_payees:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ payees")
            return
        
        # –ê–Ω–∞–ª–∏–∑
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(all_payees)} payees...")
        analysis = analyze_payees_comprehensive(all_payees)
        
        # –û—Ç—á–µ—Ç
        print_comprehensive_report(analysis, len(all_payees))
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_filename = f"full_payees_status_report_{timestamp}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'environment': 'sandbox' if is_sandbox else 'production',
            'total_payees': len(all_payees),
            'status_statistics': dict(analysis['status_stats']),
            'country_statistics': dict(analysis['country_stats']),
            'country_status_breakdown': {
                country: dict(statuses) 
                for country, statuses in analysis['country_status_stats'].items()
            },
            'ru_payees_count': len(analysis['ru_payees']),
            'active_payees_count': len(analysis['active_payees']),
            'suspended_payees_count': len(analysis['suspended_payees']),
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            'sample_ru_payees': analysis['ru_payees'][:50],  # –ü–µ—Ä–≤—ã–µ 50
            'sample_active_payees': analysis['active_payees'][:50],
        }
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\n" + "=" * 70)
        print("üèÜ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  üìä –í—Å–µ–≥–æ payees: {len(all_payees):,}")
        print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(analysis['active_payees']):,}")
        print(f"  üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(analysis['suspended_payees']):,}")
        print(f"  üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö: {len(analysis['ru_payees']):,}")
        
        if analysis['ru_payees']:
            ru_suspended = sum(1 for p in analysis['ru_payees'] if p['status'] == 'SUSPENDED')
            ru_active = sum(1 for p in analysis['ru_payees'] if p['status'] == 'ACTIVE')
            completion = (ru_suspended / len(analysis['ru_payees'])) * 100
            
            print(f"  üá∑üá∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö RU: {ru_active:,}")
            print(f"  üá∑üá∫ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö RU: {ru_suspended:,}")
            print(f"  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RU: {completion:.1f}%")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 