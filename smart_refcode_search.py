#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –ø–æ–∏—Å–∫ payee –ø–æ refCode —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
–ò—â–µ–º refCode = 22737 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
import json

def smart_search_refcode(api, target_refcode="22737"):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    
    print(f"üîç –£–ú–ù–´–ô –ü–û–ò–°–ö refCode = {target_refcode}")
    print("=" * 60)
    
    all_refcodes = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    found_payee = None
    limit = 100
    offset = 0
    page = 1
    empty_pages = 0
    max_empty_pages = 3
    
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π refCode: {target_refcode}")
    print(f"üìä –õ–∏–º–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {limit}")
    print()
    
    while True:
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            params = {
                'limit': limit,
                'offset': offset
            }
            
            response = api._make_request('GET', '/payees', params=params)
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            print(f"–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} payees (API –≥–æ–≤–æ—Ä–∏—Ç –≤—Å–µ–≥–æ: {total_count})")
            
            if not payees:
                empty_pages += 1
                print(f"    ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞! ({empty_pages}/{max_empty_pages})")
                
                if empty_pages >= max_empty_pages:
                    print("    üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                
                offset += limit
                page += 1
                continue
            else:
                empty_pages = 0
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_refcodes = []
            for payee in payees:
                ref_code = payee.get('refCode', '')
                
                if ref_code:
                    if ref_code in all_refcodes:
                        print(f"    üîÑ –î–£–ë–õ–ò–ö–ê–¢: refCode {ref_code} —É–∂–µ –±—ã–ª!")
                    else:
                        all_refcodes.add(ref_code)
                        page_refcodes.append(ref_code)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π refCode
                    if ref_code == target_refcode:
                        print(f"    üéØ –ù–ê–ô–î–ï–ù! refCode = {target_refcode}")
                        found_payee = payee
                        break
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page_refcodes:
                min_ref = min(int(r) for r in page_refcodes if r.isdigit())
                max_ref = max(int(r) for r in page_refcodes if r.isdigit())
                print(f"    üìä RefCode –¥–∏–∞–ø–∞–∑–æ–Ω: {min_ref} - {max_ref} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(page_refcodes)}")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ - –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            if found_payee:
                break
            
            # –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if len(payees) < limit:
                print(f"    ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} < {limit})")
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            expected_pages = (total_count + limit - 1) // limit if total_count > 0 else 50
            if page > expected_pages + 5:  # +5 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                print(f"    ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({expected_pages}) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                break
            
            offset += limit
            page += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            offset += limit
            page += 1
            continue
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page}")
    print(f"  üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö refCode: {len(all_refcodes)}")
    print(f"  üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π refCode: {'–î–ê' if found_payee else '–ù–ï–¢'}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Å–µ—Ö refCode
    if all_refcodes:
        numeric_refs = [int(r) for r in all_refcodes if r.isdigit()]
        if numeric_refs:
            print(f"  üìä –î–∏–∞–ø–∞–∑–æ–Ω –≤—Å–µ—Ö refCode: {min(numeric_refs)} - {max(numeric_refs)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π refCode –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
            target_int = int(target_refcode)
            if target_int < min(numeric_refs):
                print(f"  ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π refCode {target_int} –ú–ï–ù–¨–®–ï –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min(numeric_refs)}")
            elif target_int > max(numeric_refs):
                print(f"  ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π refCode {target_int} –ë–û–õ–¨–®–ï –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ {max(numeric_refs)}")
            else:
                print(f"  ‚úÖ –¶–µ–ª–µ–≤–æ–π refCode {target_int} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return found_payee

def display_payee_details(payee):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ payee"""
    
    if not payee:
        return
        
    contact = payee.get('contactInformation', {})
    
    print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ô PAYEE:")
    print("=" * 60)
    print(f"üî¢ RefCode: {payee.get('refCode')}")
    print(f"üÜî ID: {payee.get('id')}")
    print(f"üìä Status: {payee.get('status')}")
    print(f"üìõ Name: {payee.get('name', 'N/A')}")
    print(f"üë§ First Name: {contact.get('firstName', 'N/A')}")
    print(f"üë§ Last Name: {contact.get('lastName', 'N/A')}")
    print(f"üìß Email: {contact.get('email', 'N/A')}")
    print(f"üè¢ Company: {contact.get('companyName', 'N/A')}")
    print(f"üåç Country: {contact.get('beneficiaryCountryCode', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    first_name = contact.get('firstName', '').lower()
    last_name = contact.get('lastName', '').lower()
    
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ò–ú–ï–ù–ò MATHEUS DE MORAIS:")
    if 'matheus' in first_name and 'morais' in last_name:
        print(f"  ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Matheus de Morais")
    elif 'matheus' in first_name:
        print(f"  ‚ö†Ô∏è –ò–º—è Matheus –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–º–∏–ª–∏—è: {contact.get('lastName', 'N/A')}")
    else:
        print(f"  ‚ùå –≠—Ç–æ –ù–ï Matheus de Morais")
        print(f"      –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è: {contact.get('firstName', 'N/A')} {contact.get('lastName', 'N/A')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üîç –£–ú–ù–´–ô –ü–û–ò–°–ö PAYEE –ü–û REFCODE")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –ü–æ–∏—Å–∫
        payee = smart_search_refcode(api, "22737")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if payee:
            display_payee_details(payee)
            
            print(f"\nüéâ –í–´–í–û–î:")
            print(f"  ‚úÖ Payee —Å refCode = 22737 –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ")
            print(f"  üìù –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑ 86 refCode –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—é")
            
        else:
            print(f"\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"  Payee —Å refCode = 22737 –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ")
            print(f"  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"  - RefCode –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ")
            print(f"  - Payee –±—ã–ª —É–¥–∞–ª–µ–Ω")
            print(f"  - –î–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã/–∞–∫–∫–∞—É–Ω—Ç–∞")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 