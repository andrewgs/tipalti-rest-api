#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω –ø–æ beneficiaryCountryCode –∏–∑ –±—ç–∫–∞–ø–∞ payees
–ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
"""

import json
import sys
from collections import defaultdict, Counter
from datetime import datetime
import glob


def find_latest_backup_file():
    """–ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ —Å cursor"""
    backup_files = glob.glob("payees_backup_cursor_*.json")
    
    if not backup_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–∞ payees_backup_cursor_*.json")
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)
    backup_files.sort(reverse=True)
    latest_file = backup_files[0]
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    return latest_file


def analyze_countries_from_backup(filename):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω –ø–æ beneficiaryCountryCode"""
    
    print("üåç –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù –ü–û BENEFICIARY COUNTRY CODE")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        print(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
        
        with open(filename, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ payees
        metadata = backup_data.get('metadata', {})
        payees = backup_data.get('payees', [])
        
        print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞:")
        print(f"  ‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {metadata.get('datetime', 'N/A')}")
        print(f"  üë• –í—Å–µ–≥–æ payees: {metadata.get('total_payees', len(payees))}")
        print(f"  üåê –°—Ä–µ–¥–∞: {metadata.get('environment', 'N/A')}")
        print()
        
        if not payees:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö payees –≤ —Ñ–∞–π–ª–µ")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã
        print(f"üîç –ê–Ω–∞–ª–∏–∑ {len(payees)} payees...")
        
        countries_count = Counter()
        countries_details = defaultdict(list)
        no_country_count = 0
        
        for payee in payees:
            contact_info = payee.get('contactInformation', {})
            country_code = contact_info.get('beneficiaryCountryCode', '').strip()
            
            if country_code:
                countries_count[country_code] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                countries_details[country_code].append({
                    'id': payee.get('id'),
                    'refCode': payee.get('refCode'),
                    'status': payee.get('status'),
                    'email': contact_info.get('email', ''),
                    'name': payee.get('name', '')
                })
            else:
                no_country_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 60)
        print(f"üåç –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: {len(countries_count)}")
        print(f"üë• Payees —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π: {sum(countries_count.values())}")
        print(f"‚ùì Payees –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã: {no_country_count}")
        print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_countries = countries_count.most_common()
        
        print("üèÜ –°–¢–†–ê–ù–´ –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ PAYEES:")
        print("=" * 60)
        print(f"{'–†–∞–Ω–≥':<4} {'–°—Ç—Ä–∞–Ω–∞':<6} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<10} {'–ü—Ä–æ—Ü–µ–Ω—Ç':<8} {'–°—Ç–∞—Ç—É—Å'}")
        print("-" * 60)
        
        total_with_country = sum(countries_count.values())
        
        for rank, (country, count) in enumerate(sorted_countries, 1):
            percentage = (count / total_with_country * 100) if total_with_country > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã
            if country in ['RU', 'BY', 'KZ']:
                status = "üî¥ –°–∞–Ω–∫—Ü–∏–∏"
            elif country in ['UA']:
                status = "üü° –í–Ω–∏–º–∞–Ω–∏–µ" 
            elif count >= 100:
                status = "üü¢ –ö—Ä—É–ø–Ω–∞—è"
            elif count >= 10:
                status = "üîµ –°—Ä–µ–¥–Ω—è—è"
            else:
                status = "‚ö™ –ú–∞–ª–∞—è"
            
            print(f"{rank:<4} {country:<6} {count:<10} {percentage:>6.1f}% {status}")
        
        print("-" * 60)
        print(f"–ò–¢–û–ì–û: {total_with_country} payees –≤ {len(countries_count)} —Å—Ç—Ä–∞–Ω–∞—Ö")
        print()
        
        # –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        print("üéØ –¢–û–ü-10 –°–¢–†–ê–ù:")
        print("=" * 40)
        
        for rank, (country, count) in enumerate(sorted_countries[:10], 1):
            percentage = (count / total_with_country * 100) if total_with_country > 0 else 0
            print(f"{rank:2}. {country} - {count:,} payees ({percentage:.1f}%)")
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        sanctioned_countries = ['RU', 'BY', 'KZ', 'IR', 'KP']  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        sanctioned_total = sum(countries_count.get(country, 0) for country in sanctioned_countries)
        
        if sanctioned_total > 0:
            print("üî¥ –°–ê–ù–ö–¶–ò–û–ù–ù–´–ï –°–¢–†–ê–ù–´:")
            print("=" * 40)
            
            for country in sanctioned_countries:
                count = countries_count.get(country, 0)
                if count > 0:
                    percentage = (count / total_with_country * 100) if total_with_country > 0 else 0
                    print(f"{country}: {count:,} payees ({percentage:.1f}%)")
            
            print(f"\n–ò–¢–û–ì–û —Å–∞–Ω–∫—Ü–∏–π: {sanctioned_total:,} payees ({sanctioned_total/total_with_country*100:.1f}%)")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"countries_analysis_{timestamp}.json"
        
        report_data = {
            "metadata": {
                "timestamp": timestamp,
                "datetime": datetime.now().isoformat(),
                "source_file": filename,
                "total_payees": len(payees),
                "payees_with_country": total_with_country,
                "payees_without_country": no_country_count,
                "total_countries": len(countries_count)
            },
            "statistics": {
                "countries_count": dict(countries_count),
                "countries_ranked": sorted_countries,
                "sanctioned_summary": {
                    country: countries_count.get(country, 0) 
                    for country in sanctioned_countries 
                    if countries_count.get(country, 0) > 0
                }
            },
            "details": dict(countries_details)
        }
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {report_filename}")
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CSV —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω  
        csv_filename = f"countries_list_{timestamp}.csv"
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ CSV —Å–ø–∏—Å–∫–∞: {csv_filename}")
        
        with open(csv_filename, 'w', encoding='utf-8') as f:
            f.write("Rank,Country_Code,Count,Percentage,Status\n")
            
            for rank, (country, count) in enumerate(sorted_countries, 1):
                percentage = (count / total_with_country * 100) if total_with_country > 0 else 0
                
                if country in ['RU', 'BY', 'KZ']:
                    status = "Sanctioned"
                elif country in ['UA']:
                    status = "Attention" 
                elif count >= 100:
                    status = "Large"
                elif count >= 10:
                    status = "Medium"
                else:
                    status = "Small"
                
                f.write(f"{rank},{country},{count},{percentage:.2f},{status}\n")
        
        print()
        print("üéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 60)
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(payees)} payees")
        print(f"üåç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω: {len(countries_count)}")
        print(f"üìÅ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_filename}")
        print(f"üìã CSV —Å–ø–∏—Å–æ–∫: {csv_filename}")
        
        return True
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üåç –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù –ò–ó BACKUP PAYEES")
    print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º beneficiaryCountryCode")
    print()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
    backup_file = find_latest_backup_file()
    
    if not backup_file:
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    success = analyze_countries_from_backup(backup_file)
    
    if success:
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(1)


if __name__ == "__main__":
    main() 