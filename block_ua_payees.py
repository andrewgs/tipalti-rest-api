#!/usr/bin/env python3
"""
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UA (Ukrainian) Payees
–ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö payees —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ SUSPENDED
"""

import json
import time
import csv
from datetime import datetime
from tipalti_rest_api import TipaltiRestAPI
import config_rest

def get_active_ua_payees(api):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UA payees"""
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UA payees...")
    
    ua_payees = []
    limit = 100
    offset = 0
    page = 1
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            params = {
                'limit': limit,
                'offset': offset,
                'status': 'ACTIVE'
            }
            
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = api._make_request('GET', '/payees', params=params)
            
            # –ü–æ–ª—É—á–∏—Ç—å payees —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            if not payees:
                break
            
            # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ UA payees
            page_ua_payees = []
            for payee in payees:
                if payee.get('status') == 'ACTIVE':
                    contact = payee.get('contactInformation', {})
                    beneficiary_country = contact.get('beneficiaryCountryCode', '')
                    payment_country = contact.get('paymentCountryCode', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–ª—è –Ω–∞ UA
                    if beneficiary_country == 'UA' or payment_country == 'UA':
                        page_ua_payees.append({
                            'id': payee.get('id'),
                            'name': payee.get('name', 'No name'),
                            'status': payee.get('status'),
                            'beneficiary_country': beneficiary_country,
                            'payment_country': payment_country,
                            'email': contact.get('email', 'No email'),
                            'payee_data': payee  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        })
            
            ua_payees.extend(page_ua_payees)
            
            print(f"–Ω–∞–π–¥–µ–Ω–æ {len(page_ua_payees)} UA payees (–≤—Å–µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(payees)})")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"  üìä –í—Å–µ–≥–æ UA payees –Ω–∞–π–¥–µ–Ω–æ: {len(ua_payees)}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, —Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(payees) < limit:
                break
            
            offset += limit
            page += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            time.sleep(0.1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            offset += limit
            page += 1
            continue
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(ua_payees)} –∞–∫—Ç–∏–≤–Ω—ã—Ö UA payees")
    return ua_payees

def suspend_payee(api, payee_info, dry_run=True):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ payee"""
    
    payee_id = payee_info['id']
    
    if dry_run:
        return {
            'success': True,
            'action': 'DRY_RUN',
            'payee_id': payee_id,
            'message': 'Would suspend payee (dry run mode)'
        }
    
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ SUSPENDED
        update_data = {
            'status': 'SUSPENDED'
        }
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å PATCH –∑–∞–ø—Ä–æ—Å
        success = api.update_payee(payee_id, update_data)
        
        if success:
            return {
                'success': True,
                'action': 'SUSPENDED',
                'payee_id': payee_id,
                'message': 'Successfully suspended payee'
            }
        else:
            return {
                'success': False,
                'action': 'FAILED',
                'payee_id': payee_id,
                'message': 'API update_payee returned False'
            }
            
    except Exception as e:
        return {
            'success': False,
            'action': 'ERROR',
            'payee_id': payee_id,
            'message': f'Exception: {str(e)}'
        }

def block_ua_payees_batch(api, ua_payees, dry_run=True, batch_size=10, delay=1.0):
    """–ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ UA payees"""
    
    total_payees = len(ua_payees)
    successful = 0
    failed = 0
    results = []
    
    print(f"\nüöÄ {'[DRY RUN] ' if dry_run else ''}–ù–∞—á–∏–Ω–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É {total_payees} UA payees")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}, –ø–∞—É–∑–∞: {delay}s")
    print("=" * 80)
    
    for i in range(0, total_payees, batch_size):
        batch = ua_payees[i:i + batch_size]
        batch_num = (i // batch_size) + 1
        total_batches = (total_payees + batch_size - 1) // batch_size
        
        print(f"\nüì¶ –ë–∞—Ç—á {batch_num}/{total_batches} ({len(batch)} payees):")
        
        batch_results = []
        for j, payee in enumerate(batch):
            payee_num = i + j + 1
            
            print(f"  {payee_num:4d}/{total_payees} | {payee['id']} | {payee['email'][:30]:<30} | ", end="")
            
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å payee
            result = suspend_payee(api, payee, dry_run)
            
            # –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result.update({
                'payee_name': payee['name'],
                'payee_email': payee['email'],
                'beneficiary_country': payee['beneficiary_country'],
                'payment_country': payee['payment_country'],
                'processed_at': datetime.now().isoformat()
            })
            
            batch_results.append(result)
            results.append(result)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                successful += 1
                print(f"‚úÖ {result['action']}")
            else:
                failed += 1
                print(f"‚ùå {result['action']}: {result['message']}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É payees
            if not dry_run:
                time.sleep(0.2)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞
        batch_success = sum(1 for r in batch_results if r['success'])
        batch_failed = len(batch_results) - batch_success
        
        print(f"  üìä –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω: ‚úÖ {batch_success} | ‚ùå {batch_failed}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if i + batch_size < total_payees:  # –ù–µ –∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ç—á–∞
            print(f"  ‚è≥ –ü–∞—É–∑–∞ {delay}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
            time.sleep(delay)
    
    print("\n" + "=" * 80)
    print(f"üèÅ {'[DRY RUN] ' if dry_run else ''}–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_payees}")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {failed}")
    
    if successful > 0:
        success_rate = (successful / total_payees) * 100
        print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    return results

def save_results_report(results, ua_payees, dry_run=True):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    prefix = 'dryrun_' if dry_run else ''
    
    # JSON –æ—Ç—á–µ—Ç
    json_filename = f"{prefix}ua_payees_blocking_report_{timestamp}.json"
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'dry_run': dry_run,
        'total_payees': len(ua_payees),
        'total_processed': len(results),
        'successful': sum(1 for r in results if r['success']),
        'failed': sum(1 for r in results if not r['success']),
        'results': results
    }
    
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    # CSV –æ—Ç—á–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    csv_filename = f"{prefix}ua_payees_blocking_summary_{timestamp}.csv"
    with open(csv_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            'Payee ID', 'Name', 'Email', 'Beneficiary Country', 'Payment Country',
            'Action', 'Success', 'Message', 'Processed At'
        ])
        
        for result in results:
            writer.writerow([
                result['payee_id'],
                result['payee_name'],
                result['payee_email'],
                result['beneficiary_country'],
                result['payment_country'],
                result['action'],
                result['success'],
                result['message'],
                result['processed_at']
            ])
    
    print(f"\nüíæ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"  üìÑ JSON: {json_filename}")
    print(f"  üìä CSV: {csv_filename}")
    
    return json_filename, csv_filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê UA PAYEES - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ UA payees!")
        print("   –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ—Ö —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö payees –≤ —Å–∏—Å—Ç–µ–º–µ.")
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ dry run
        print("\nüîç –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ DRY RUN –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö UA payees
        ua_payees = get_active_ua_payees(api)
        
        if not ua_payees:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö UA payees –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            return
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ UA payees:")
        print(f"  üî¢ –í—Å–µ–≥–æ: {len(ua_payees)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
        print(f"  üìù –ü—Ä–∏–º–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 5):")
        for i, payee in enumerate(ua_payees[:5]):
            print(f"    {i+1}. {payee['email']} | {payee['beneficiary_country']} -> {payee['payment_country']}")
        
        # DRY RUN
        print(f"\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º DRY RUN...")
        dry_results = block_ua_payees_batch(api, ua_payees, dry_run=True, batch_size=10, delay=0.5)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DRY RUN –æ—Ç—á–µ—Ç
        save_results_report(dry_results, ua_payees, dry_run=True)
        
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"\n" + "="*80)
        print(f"‚ùì DRY RUN –∑–∞–≤–µ—Ä—à–µ–Ω. –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –†–ï–ê–õ–¨–ù–£–Æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É {len(ua_payees)} UA payees?")
        print(f"   –í–≤–µ–¥–∏—Ç–µ 'BLOCK UA PAYEES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        
        user_input = input().strip()
        
        if user_input != 'BLOCK UA PAYEES':
            print("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        
        # –†–ï–ê–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...")
        real_results = block_ua_payees_batch(api, ua_payees, dry_run=False, batch_size=5, delay=2.0)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        save_results_report(real_results, ua_payees, dry_run=False)
        
        print(f"\nüèÜ –ë–õ–û–ö–ò–†–û–í–ö–ê UA PAYEES –ó–ê–í–ï–†–®–ï–ù–ê!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 