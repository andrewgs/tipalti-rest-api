#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ payee –≤ —Å–∏—Å—Ç–µ–º–µ Tipalti
–ò—â–µ–º Matheus de Morais —Å ID 22737
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
from datetime import datetime
import json

def search_payee_comprehensive(api, search_name="Matheus de Morais", search_id="22737"):
    """–ü–æ–∏—Å–∫ payee –ø–æ –∏–º–µ–Ω–∏ –∏ ID –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö"""
    
    print(f"üîç –ò—â–µ–º payee: '{search_name}' —Å ID '{search_id}'")
    print("=" * 60)
    
    all_payees = []
    found_payees = []
    limit = 100
    offset = 0
    page = 1
    
    print("üì• –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ—Ö payees –≤ –ø–æ–∏—Å–∫–∞—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            params = {
                'limit': limit,
                'offset': offset
            }
            
            response = api._make_request('GET', '/payees', params=params)
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            print(f"–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} payees")
            
            if not payees:
                break
            
            # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            for payee in payees:
                payee_id = payee.get('id', '')
                ref_code = payee.get('refCode', '')
                name = payee.get('name', '')
                contact = payee.get('contactInformation', {})
                first_name = contact.get('firstName', '')
                last_name = contact.get('lastName', '')
                email = contact.get('email', '')
                company_name = contact.get('companyName', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                matches = []
                
                # –ü–æ –∏–º–µ–Ω–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None)
                full_name = f"{first_name} {last_name}".strip()
                if search_name and name and search_name.lower() in name.lower():
                    matches.append(f"name='{name}'")
                if search_name and full_name and search_name.lower() in full_name.lower():
                    matches.append(f"firstName+lastName='{full_name}'")
                if search_name and company_name and search_name.lower() in company_name.lower():
                    matches.append(f"companyName='{company_name}'")
                
                # –ü–æ ID
                if search_id == ref_code:
                    matches.append(f"refCode='{ref_code}'")
                if search_id in payee_id:
                    matches.append(f"ID —Å–æ–¥–µ—Ä–∂–∏—Ç '{search_id}'")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if matches:
                    found_payees.append({
                        'payee': payee,
                        'matches': matches,
                        'match_score': len(matches)
                    })
            
            all_payees.extend(payees)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (len(all_payees) / total_count) * 100 if total_count > 0 else 0
            print(f"    üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_payees)}/{total_count} ({progress:.1f}%) | –ù–∞–π–¥–µ–Ω–æ: {len(found_payees)}")
            
            if len(payees) < limit:
                break
            
            offset += limit
            page += 1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —É–∂–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if any(match['match_score'] >= 2 for match in found_payees):
                print("  üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
                break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            offset += limit
            page += 1
            continue
    
    print(f"\n‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_payees)} payees")
    
    return found_payees, all_payees

def display_found_payees(found_payees):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö payees —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    if not found_payees:
        print("‚ùå Payee –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    found_payees.sort(key=lambda x: x['match_score'], reverse=True)
    
    print(f"\nüéØ –ù–ê–ô–î–ï–ù–û {len(found_payees)} –°–û–í–ü–ê–î–ï–ù–ò–ô:")
    print("=" * 80)
    
    for i, result in enumerate(found_payees, 1):
        payee = result['payee']
        matches = result['matches']
        contact = payee.get('contactInformation', {})
        
        print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢ #{i} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_score']}):")
        print(f"  üìã –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(matches)}")
        print(f"  " + "-" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"  üÜî Payee ID (–ø–æ–ª–Ω—ã–π): {payee.get('id', 'N/A')}")
        print(f"  üî¢ RefCode: {payee.get('refCode', 'N/A')}")
        print(f"  üìõ Name: {payee.get('name', 'N/A')}")
        print(f"  üìä Status: {payee.get('status', 'N/A')}")
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"  üë§ First Name: {contact.get('firstName', 'N/A')}")
        print(f"  üë§ Last Name: {contact.get('lastName', 'N/A')}")
        print(f"  üè¢ Company: {contact.get('companyName', 'N/A')}")
        print(f"  üìß Email: {contact.get('email', 'N/A')}")
        
        # –ê–¥—Ä–µ—Å
        address_info = contact.get('address', {})
        if isinstance(address_info, dict):
            print(f"  üè† Address: {address_info.get('line1', 'N/A')}")
            print(f"  üèôÔ∏è City: {address_info.get('city', 'N/A')}")
            print(f"  üó∫Ô∏è State: {address_info.get('state', 'N/A')}")
            print(f"  üìÆ Postal Code: {address_info.get('postalCode', 'N/A')}")
        
        # –°—Ç—Ä–∞–Ω—ã
        print(f"  üåç Beneficiary Country: {contact.get('beneficiaryCountryCode', 'N/A')}")
        print(f"  üí≥ Payment Country: {contact.get('paymentCountryCode', 'N/A')}")
        
        # –î–∞—Ç—ã
        print(f"  üìÖ Created: {payee.get('created', 'N/A')}")
        print(f"  üîÑ Last Updated: {payee.get('lastUpdated', 'N/A')}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"  üìû Phone: {contact.get('phone', 'N/A')}")
        print(f"  üÜî Tax ID: {contact.get('taxId', 'N/A')}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ (–ª—É—á—à–µ–≥–æ) —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if i == 1:
            print(f"\n  üìÑ –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï PAYEE (JSON):")
            print("  " + "="*60)
            print(json.dumps(payee, indent=4, ensure_ascii=False))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üîç –ü–û–ò–°–ö PAYEE 'Matheus de Morais' (ID: 22737) - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –ü–æ–∏—Å–∫ payee
        found_payees, all_payees = search_payee_comprehensive(api)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        display_found_payees(found_payees)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if found_payees:
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
            print("=" * 80)
            
            best_match = found_payees[0]
            payee = best_match['payee']
            
            print(f"‚úÖ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
            print(f"  üî¢ RefCode –≤ —Å–∏—Å—Ç–µ–º–µ: {payee.get('refCode', '–ù–ï–¢')}")
            print(f"  üÜî –ü–æ–ª–Ω—ã–π ID: {payee.get('id', '–ù–ï–¢')}")
            print(f"  üìõ –ò–º—è: {payee.get('contactInformation', {}).get('firstName', '')} {payee.get('contactInformation', {}).get('lastName', '')}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ 22737 refCode
            if payee.get('refCode') == '22737':
                print(f"  üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: 22737 - —ç—Ç–æ refCode!")
            else:
                print(f"  ‚ö†Ô∏è  22737 –ù–ï —è–≤–ª—è–µ—Ç—Å—è refCode —ç—Ç–æ–≥–æ payee")
        
        else:
            print(f"\n‚ùå Payee 'Matheus de Morais' —Å ID 22737 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏–ª–∏ ID")
            print(f"   - Payee –±—ã–ª —É–¥–∞–ª–µ–Ω")
            print(f"   - –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ/—Å—Ä–µ–¥–µ")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 