#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ payees —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ refCode
1. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö payees –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Tipalti
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö refCode –≤ —Å–∏—Å—Ç–µ–º–µ
3. –°–æ–∑–¥–∞–µ—Ç CSV —Å–æ –≤—Å–µ–º–∏ payees –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ refCode
"""

from tipalti_rest_api import TipaltiRestAPI
import config_rest
from datetime import datetime
import csv
import json
import time

# –°–ø–∏—Å–æ–∫ refCode –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
EXCLUDED_REFCODES = [
    922, 1177, 1191, 1434, 1929, 2055, 2116, 2330, 3226, 3258, 3356, 3906, 4305, 5361, 
    10280, 10770, 11912, 12662, 13496, 13614, 14575, 15208, 15673, 15699, 16619, 17513, 
    18212, 18375, 20820, 21006, 21016, 21087, 21251, 21873, 22226, 22737, 22848, 24582, 
    24708, 24799, 24977, 25776, 25786, 26220, 26485, 26837, 26875, 26979, 27119, 27188, 
    27390, 27462, 27464, 27862, 32323, 32810, 33015, 33114, 33219, 33310, 33421, 33427, 
    33665, 33905, 33997, 34003, 34630, 34693, 34698, 34705, 34953, 35121, 35553, 36156, 
    36164, 36169, 36200, 36315, 36369, 36688, 36807, 36972, 37010, 37039, 37073, 37102
]

def get_all_payees_comprehensive(api):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö payees —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï payees –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)...")
    
    all_payees = []
    limit = 100
    offset = 0
    page = 1
    max_empty_pages = 5  # –ú–∞–∫—Å–∏–º—É–º –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥
    empty_pages = 0
    
    while True:
        print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} (offset: {offset})...", end=" ")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–æ–≤
            params = {
                'limit': limit,
                'offset': offset
                # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• payees
            }
            
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = api._make_request('GET', '/payees', params=params)
            
            # –ü–æ–ª—É—á–∏—Ç—å payees —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            payees = response.get('items', [])
            total_count = response.get('totalCount', 0)
            
            print(f"–ø–æ–ª—É—á–µ–Ω–æ {len(payees)} payees (–≤—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–æ: {total_count})")
            
            if not payees:
                empty_pages += 1
                print(f"  ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {empty_pages}/{max_empty_pages}")
                
                if empty_pages >= max_empty_pages:
                    print("  ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - –∑–∞–≤–µ—Ä—à–∞–µ–º")
                    break
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                offset += limit
                page += 1
                continue
            else:
                empty_pages = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥–æ–≥–æ payee
            for payee in payees:
                payee_id = payee.get('id', '')
                ref_code = payee.get('refCode', '')
                contact = payee.get('contactInformation', {})
                
                # –ò–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                payee_info = {
                    'id': payee_id,
                    'refCode': ref_code,
                    'status': payee.get('status', ''),
                    'name': payee.get('name', 'No name'),
                    'email': contact.get('email', ''),
                    'firstName': contact.get('firstName', ''),
                    'lastName': contact.get('lastName', ''),
                    'companyName': contact.get('companyName', ''),
                    'beneficiaryCountryCode': contact.get('beneficiaryCountryCode', ''),
                    'paymentCountryCode': contact.get('paymentCountryCode', ''),
                    'created': payee.get('created', ''),
                    'lastUpdated': payee.get('lastUpdated', '')
                }
                
                all_payees.append(payee_info)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            if total_count > 0:
                progress = (len(all_payees) / total_count) * 100
                print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(all_payees)}/{total_count} ({progress:.1f}%)")
            else:
                print(f"  üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_payees)} payees")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(payees) < limit:
                print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                # –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            
            offset += limit
            page += 1
            
            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            time.sleep(0.1)
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if page > 1000:  # –ú–∞–∫—Å–∏–º—É–º 1000 —Å—Ç—Ä–∞–Ω–∏—Ü
                print("  ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (1000) - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            empty_pages += 1
            if empty_pages >= max_empty_pages:
                print("  ‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –∑–∞–≤–µ—Ä—à–∞–µ–º")
                break
            offset += limit
            page += 1
            continue
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ {len(all_payees)} payees")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ refCode
    refcodes = [p['refCode'] for p in all_payees if p['refCode']]
    if refcodes:
        refcodes_int = []
        for rc in refcodes:
            try:
                refcodes_int.append(int(rc))
            except ValueError:
                pass
        
        if refcodes_int:
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ refCode:")
            print(f"  üî¢ –í—Å–µ–≥–æ —Å refCode: {len(refcodes)}")
            print(f"  üìà –î–∏–∞–ø–∞–∑–æ–Ω: {min(refcodes_int)} - {max(refcodes_int)}")
            print(f"  üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(set(refcodes_int))}")
    
    return all_payees

def check_refcodes_presence(all_payees, excluded_refcodes):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ {len(excluded_refcodes)} –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode –≤ —Å–∏—Å—Ç–µ–º–µ...")
    
    # –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ refCode
    payees_by_refcode = {}
    
    for payee in all_payees:
        ref_code = payee.get('refCode', '')
        if ref_code:
            try:
                ref_code_int = int(ref_code)
                payees_by_refcode[ref_code_int] = payee
            except ValueError:
                # –ù–µ—á–∏—Å–ª–æ–≤–æ–π refCode - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass
    
    print(f"üìã –í —Å–∏—Å—Ç–µ–º–µ –Ω–∞–π–¥–µ–Ω–æ {len(payees_by_refcode)} payees —Å —á–∏—Å–ª–æ–≤—ã–º–∏ refCode")
    print(f"üîç –î–∏–∞–ø–∞–∑–æ–Ω refCode –≤ —Å–∏—Å—Ç–µ–º–µ: {min(payees_by_refcode.keys())} - {max(payees_by_refcode.keys())}")
    
    found_refcodes = []
    missing_refcodes = []
    found_payees = []
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode:")
    
    for excluded_refcode in excluded_refcodes:
        if excluded_refcode in payees_by_refcode:
            payee = payees_by_refcode[excluded_refcode]
            found_refcodes.append(excluded_refcode)
            found_payees.append(payee)
            email_display = (payee['email'][:40] + "...") if len(payee['email']) > 40 else payee['email']
            print(f"  ‚úÖ {excluded_refcode:5d} | {email_display:<43} | {payee['status']}")
        else:
            missing_refcodes.append(excluded_refcode)
            print(f"  ‚ùå {excluded_refcode:5d} | –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(found_refcodes)}")
    print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(missing_refcodes)}")
    
    if missing_refcodes:
        print(f"\n‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–ù–´–ï REFCODE:")
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∞–º–∏ –ø–æ 10
        for i in range(0, len(missing_refcodes), 10):
            batch = missing_refcodes[i:i+10]
            print(f"    {', '.join(map(str, batch))}")
    
    if found_refcodes:
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï REFCODE:")
        for i in range(0, len(found_refcodes), 10):
            batch = found_refcodes[i:i+10]
            print(f"    {', '.join(map(str, batch))}")
    
    return found_refcodes, missing_refcodes, found_payees

def create_exclusion_csv_by_refcode(all_payees, excluded_refcodes):
    """–°–æ–∑–¥–∞—Ç—å CSV —Å–æ –≤—Å–µ–º–∏ payees –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ refCode"""
    
    print(f"\nüìù –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ refCode...")
    
    # –°–æ–∑–¥–∞—Ç—å set –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    excluded_refcodes_set = set(excluded_refcodes)
    
    # –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å payees
    included_payees = []
    excluded_payees = []
    
    for payee in all_payees:
        ref_code = payee.get('refCode', '')
        
        should_exclude = False
        if ref_code:
            try:
                ref_code_int = int(ref_code)
                if ref_code_int in excluded_refcodes_set:
                    should_exclude = True
            except ValueError:
                # –ù–µ—á–∏—Å–ª–æ–≤–æ–π refCode - –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                pass
        
        if should_exclude:
            excluded_payees.append(payee)
        else:
            included_payees.append(payee)
    
    print(f"  üìä –í—Å–µ–≥–æ payees: {len(all_payees)}")
    print(f"  üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ refCode: {len(excluded_payees)}")
    print(f"  ‚úÖ –í–∫–ª—é—á–µ–Ω–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(included_payees)}")
    
    # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # 1. –ü–æ–ª–Ω—ã–π CSV
    csv_filename = f"payees_excluding_refcodes_{timestamp}.csv"
    with open(csv_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID', 'RefCode', 'Status', 'Name', 'Email', 'FirstName', 'LastName', 
            'CompanyName', 'BeneficiaryCountry', 'PaymentCountry', 'Created', 'LastUpdated'
        ])
        
        for payee in included_payees:
            writer.writerow([
                payee['id'], payee['refCode'], payee['status'], payee['name'],
                payee['email'], payee['firstName'], payee['lastName'], payee['companyName'],
                payee['beneficiaryCountryCode'], payee['paymentCountryCode'],
                payee['created'], payee['lastUpdated']
            ])
    
    # 2. –¢–æ–ª—å–∫–æ ID
    ids_filename = f"payee_ids_excluding_refcodes_{timestamp}.csv"
    with open(ids_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['PayeeID'])
        for payee in included_payees:
            writer.writerow([payee['id']])
    
    # 3. –¢–æ–ª—å–∫–æ refCode
    refcodes_filename = f"payee_refcodes_excluding_specified_{timestamp}.csv"
    with open(refcodes_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['RefCode'])
        for payee in included_payees:
            if payee['refCode']:
                writer.writerow([payee['refCode']])
    
    # 4. –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ payees (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
    excluded_filename = f"excluded_payees_by_refcode_{timestamp}.csv"
    with open(excluded_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            'ID', 'RefCode', 'Status', 'Name', 'Email', 'FirstName', 'LastName', 
            'CompanyName', 'BeneficiaryCountry', 'PaymentCountry', 'Created', 'LastUpdated'
        ])
        
        for payee in excluded_payees:
            writer.writerow([
                payee['id'], payee['refCode'], payee['status'], payee['name'],
                payee['email'], payee['firstName'], payee['lastName'], payee['companyName'],
                payee['beneficiaryCountryCode'], payee['paymentCountryCode'],
                payee['created'], payee['lastUpdated']
            ])
    
    print(f"\nüíæ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"  üìÑ –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫: {csv_filename}")
    print(f"  üÜî –¢–æ–ª—å–∫–æ ID: {ids_filename}")
    print(f"  üî¢ –¢–æ–ª—å–∫–æ RefCode: {refcodes_filename}")
    print(f"  üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ: {excluded_filename}")
    
    return csv_filename, ids_filename, refcodes_filename, excluded_filename, included_payees, excluded_payees

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"üìã –°–û–ó–î–ê–ù–ò–ï –°–ü–ò–°–ö–ê PAYEES –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ü–û REFCODE - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_rest.validate_config()
        client_id, client_secret, is_sandbox = config_rest.get_validated_config()
        
        print(f"üåê –°—Ä–µ–¥–∞: {'Sandbox' if is_sandbox else 'Production'}")
        print(f"üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ refCode –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {len(EXCLUDED_REFCODES)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode
        min_refcode = min(EXCLUDED_REFCODES)
        max_refcode = max(EXCLUDED_REFCODES)
        print(f"üìù –î–∏–∞–ø–∞–∑–æ–Ω –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode: {min_refcode} - {max_refcode}")
        print(f"   –ü–µ—Ä–≤—ã–µ 10: {EXCLUDED_REFCODES[:10]}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {EXCLUDED_REFCODES[-10:]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = TipaltiRestAPI(client_id, client_secret, is_sandbox)
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö payees —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        all_payees = get_all_payees_comprehensive(api)
        
        if not all_payees:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ payees")
            return
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö refCode
        found_refcodes, missing_refcodes, found_payees = check_refcodes_presence(all_payees, EXCLUDED_REFCODES)
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å CSV —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –ø–æ refCode
        csv_file, ids_file, refcodes_file, excluded_file, included_payees, excluded_payees = create_exclusion_csv_by_refcode(
            all_payees, EXCLUDED_REFCODES
        )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n" + "=" * 80)
        print(f"üèÜ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
        print(f"  üìä –í—Å–µ–≥–æ payees –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_payees):,}")
        print(f"  üö´ –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å refCode: {len(EXCLUDED_REFCODES)}")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–∫–ª—é—á–µ–Ω–æ: {len(found_refcodes)}")
        print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(missing_refcodes)}")
        print(f"  üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç: {len(included_payees):,} payees")
        
        if found_refcodes:
            success_rate = (len(found_refcodes) / len(EXCLUDED_REFCODES)) * 100
            print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {success_rate:.1f}%")
        
        if missing_refcodes:
            print(f"  ‚ö†Ô∏è  {len(missing_refcodes)} refCode –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 